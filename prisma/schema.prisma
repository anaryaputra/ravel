// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id          String        @id @default(cuid())
  userId      String        @unique @map(name: "user_id")
  name        String
  password    String
  createdAt   DateTime      @default(now()) @map(name: "created_at")
  updatedAt   DateTime      @updatedAt @map(name: "updated_at")
  sessions    Session[]
  accessToken AccessToken[]
  testimony   Testimony[]
}

model AccessToken {
  id         Int      @id @default(autoincrement())
  userId     String   @unique @map("user_id")
  identifier String
  token      String   @unique @map("access_token")
  expires    DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @unique @map("user_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tour {
  id          String   @id @default(cuid())
  name        String
  slug        String
  rating      Float
  price       Float
  image       String
  description String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
}

model Testimony {
  id              String  @id @default(cuid())
  userId          String  @unique @map("user_id")
  applicationRate String  @map("application_rate")
  image           String?
  name            String
  rateComment     String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
